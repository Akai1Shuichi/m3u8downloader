name: Build and Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., v1.0.0)'
        required: true
        default: 'v1.0.0'

jobs:
  build-and-release:
    runs-on: windows-latest
    permissions:
      contents: write
      pull-requests: write
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Resolve version
      id: set-version
      shell: pwsh
      run: |
        $ref = "${{ github.ref }}"
        if ($ref -like "refs/tags/*") {
          $refName = "${{ github.ref_name }}"
        } else {
          $refName = "${{ github.event.inputs.version }}"
          if (-not $refName) { $refName = 'v1.0.0' }
        }
        $plain = $refName -replace '^v',''
        Write-Host "Resolved version: ref=$refName, plain=$plain"
        "ref=$refName" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
        "plain=$plain" | Out-File -FilePath $env:GITHUB_OUTPUT -Append

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '8.0.x'
        
    - name: Restore dependencies
      run: dotnet restore m3u8Downloader.csproj
      
    - name: Build application
      run: dotnet build m3u8Downloader.csproj --configuration Release --no-restore
      
    - name: Publish application
      run: |
        dotnet publish m3u8Downloader.csproj `
          --configuration Release `
          --runtime win-x64 `
          --self-contained true `
          --output ./publish/win-x64 `
          -p:PublishReadyToRun=true `
          -p:PublishSingleFile=false
          
    - name: Create release package
      run: |
        # Create release directory
        New-Item -ItemType Directory -Force -Path "release"
        
        # Copy all files to release folder
        Copy-Item -Path "publish/win-x64/*" -Destination "release/" -Recurse -Force
        
        # Create ZIP package
        $version = "${{ steps.set-version.outputs.ref }}"
        
        Write-Host "Creating package for version: $version"
        
        Compress-Archive -Path "release/*" -DestinationPath "m3u8Downloader-$version.zip" -Force
        
        # Display package info
        $zipFile = Get-Item "m3u8Downloader-$version.zip"
        Write-Host "Package created: $($zipFile.Name)"
        Write-Host "Package size: $($zipFile.Length) bytes"
        
    - name: Upload release artifacts
      uses: actions/upload-artifact@v4
      with:
        name: m3u8Downloader-${{ steps.set-version.outputs.ref }}
        path: |
          m3u8Downloader-${{ steps.set-version.outputs.ref }}.zip
          release/
    
    - name: Ensure changelog section exists
      run: |
        $version = "${{ steps.set-version.outputs.plain }}"
        $file = "CHANGELOG.md"

        if (-not (Test-Path $file)) {
          Write-Host "CHANGELOG.md not found — creating new"
          $lines = @()
          $lines += "## [$version] - $(Get-Date -Format 'yyyy-MM-dd')"
          $lines += "- Initial autogenerated changelog."
          $lines | Out-File $file -Encoding UTF8
        } elseif (-not (Select-String -Path $file -Pattern "## \[$version\]" -Quiet)) {
          Write-Host "CHANGELOG.md found but missing section for $version — adding it."
          Add-Content -Path $file -Value "`n## [$version] - $(Get-Date -Format 'yyyy-MM-dd')`n- Auto generated entry.`n" -Encoding UTF8
        }
    
    - name: Generate release notes from CHANGELOG.md
      id: gen-notes
      run: |
        # Use resolved version (plain)
        $version = "${{ steps.set-version.outputs.plain }}"
        Write-Host "Using version: $version"

        $changelogPath = "CHANGELOG.md"
        if (-not (Test-Path $changelogPath)) {
          Write-Host "CHANGELOG.md not found"
          "notes=CHANGELOG.md not found" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
          exit 0
        }

        $content = Get-Content $changelogPath -Raw
        $pattern = "(?s)## \[$([Regex]::Escape($version))\][\s\S]*?(?=\n## \[|\Z)"
        $match = [Regex]::Match($content, $pattern)
        if ($match.Success) {
          $section = $match.Value.Trim()
          # Prepend a title for nicer release notes
          $header = "## M3U8 Downloader v$version`n"
          $body = $header + "`n" + $section + "`n"
        } else {
          $body = "## M3U8 Downloader v$version`n`nNo matching section found in CHANGELOG.md."
        }

        # Write to a file for body_path
        $outFile = "RELEASE_BODY.md"
        Set-Content -Path $outFile -Value $body -Encoding UTF8

        Write-Host "Release notes written to $outFile"
          
    - name: Check if release exists
      if: startsWith(github.ref, 'refs/tags/')
      id: check-release
      run: |
        $tag = "${{ github.ref_name }}"
        $owner = "${{ github.repository_owner }}"
        $repo = "${{ github.event.repository.name }}"
        
        try {
          $response = Invoke-RestMethod -Uri "https://api.github.com/repos/$owner/$repo/releases/tags/$tag" -Headers @{Authorization = "Bearer $env:GITHUB_TOKEN"} -ErrorAction Stop
          Write-Host "Release $tag already exists"
          "exists=true" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
        } catch {
          if ($_.Exception.Response.StatusCode -eq 404) {
            Write-Host "Release $tag does not exist"
            "exists=false" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
          } else {
            Write-Host "Error checking release: $($_.Exception.Message)"
            "exists=false" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
          }
        }
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Create GitHub Release
      if: startsWith(github.ref, 'refs/tags/') && steps.check-release.outputs.exists == 'false'
      uses: softprops/action-gh-release@v1
      with:
        files: |
          m3u8Downloader-${{ github.ref_name }}.zip
        name: Release ${{ github.ref_name }}
        tag_name: ${{ github.ref_name }}
        body_path: RELEASE_BODY.md
        draft: false
        prerelease: false
        fail_on_unmatched_files: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Update existing release
      if: startsWith(github.ref, 'refs/tags/') && steps.check-release.outputs.exists == 'true'
      run: |
        $tag = "${{ github.ref_name }}"
        Write-Host "Updating existing release $tag with new assets"
        
        # Use the softprops action to upload assets to existing release
        Write-Host "Assets will be uploaded to existing release $tag"
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Upload assets to existing release
      if: startsWith(github.ref, 'refs/tags/') && steps.check-release.outputs.exists == 'true'
      uses: softprops/action-gh-release@v1
      with:
        files: |
          m3u8Downloader-${{ github.ref_name }}.zip
        tag_name: ${{ github.ref_name }}
        overwrite: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
